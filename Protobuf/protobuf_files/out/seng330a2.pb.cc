// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: seng330a2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "seng330a2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace seng330a2 {

namespace {

const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Member_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Customer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Customer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Customer_SubscriptionLevel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Staff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Staff_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Staff_Clearance_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_seng330a2_2eproto() {
  protobuf_AddDesc_seng330a2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "seng330a2.proto");
  GOOGLE_CHECK(file != NULL);
  Member_descriptor_ = file->message_type(0);
  static const int Member_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, membership_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, bracelet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, member_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, customer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, staff_),
  };
  Member_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      -1,
      -1,
      sizeof(Member),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _internal_metadata_),
      -1);
  Member_Type_descriptor_ = Member_descriptor_->enum_type(0);
  Customer_descriptor_ = file->message_type(1);
  static const int Customer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, credit_card_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, gym_credits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, subscription_level_),
  };
  Customer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Customer_descriptor_,
      Customer::default_instance_,
      Customer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, _has_bits_[0]),
      -1,
      -1,
      sizeof(Customer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Customer, _internal_metadata_),
      -1);
  Customer_SubscriptionLevel_descriptor_ = Customer_descriptor_->enum_type(0);
  Staff_descriptor_ = file->message_type(2);
  static const int Staff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Staff, employee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Staff, staff_clearance_),
  };
  Staff_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Staff_descriptor_,
      Staff::default_instance_,
      Staff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Staff, _has_bits_[0]),
      -1,
      -1,
      sizeof(Staff),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Staff, _internal_metadata_),
      -1);
  Staff_Clearance_descriptor_ = Staff_descriptor_->enum_type(0);
  MemberList_descriptor_ = file->message_type(3);
  static const int MemberList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, member_),
  };
  MemberList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemberList_descriptor_,
      MemberList::default_instance_,
      MemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, _has_bits_[0]),
      -1,
      -1,
      sizeof(MemberList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberList, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_seng330a2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Member_descriptor_, &Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Customer_descriptor_, &Customer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Staff_descriptor_, &Staff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemberList_descriptor_, &MemberList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_seng330a2_2eproto() {
  delete Member::default_instance_;
  delete Member_reflection_;
  delete Customer::default_instance_;
  delete Customer_reflection_;
  delete Staff::default_instance_;
  delete Staff_reflection_;
  delete MemberList::default_instance_;
  delete MemberList_reflection_;
}

void protobuf_AddDesc_seng330a2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017seng330a2.proto\022\tseng330a2\"\351\001\n\006Member\022"
    "\014\n\004name\030\001 \002(\t\022\017\n\007address\030\002 \002(\t\022\025\n\rmember"
    "ship_id\030\003 \002(\004\022\023\n\013bracelet_id\030\004 \002(\004\022+\n\013me"
    "mber_type\030\005 \002(\0162\026.seng330a2.Member.Type\022"
    "%\n\010customer\030\006 \001(\0132\023.seng330a2.Customer\022\037"
    "\n\005staff\030\007 \001(\0132\020.seng330a2.Staff\"\037\n\004Type\022"
    "\014\n\010CUSTOMER\020\000\022\t\n\005STAFF\020\001\"\302\001\n\010Customer\022\027\n"
    "\017credit_card_num\030\001 \002(\004\022\023\n\013gym_credits\030\002 "
    "\002(\005\022A\n\022subscription_level\030\003 \002(\0162%.seng33"
    "0a2.Customer.SubscriptionLevel\"E\n\021Subscr"
    "iptionLevel\022\014\n\010INACTIVE\020\000\022\t\n\005BASIC\020\001\022\013\n\007"
    "PREMIUM\020\002\022\n\n\006DELUXE\020\003\"\213\001\n\005Staff\022\023\n\013emplo"
    "yee_id\030\001 \002(\004\0223\n\017staff_clearance\030\003 \002(\0162\032."
    "seng330a2.Staff.Clearance\"8\n\tClearance\022\013"
    "\n\007GENERAL\020\000\022\013\n\007MANAGER\020\001\022\021\n\rADMINISTRATO"
    "R\020\002\"/\n\nMemberList\022!\n\006member\030\001 \003(\0132\021.seng"
    "330a2.Member", 652);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "seng330a2.proto", &protobuf_RegisterTypes);
  Member::default_instance_ = new Member();
  Customer::default_instance_ = new Customer();
  Staff::default_instance_ = new Staff();
  MemberList::default_instance_ = new MemberList();
  Member::default_instance_->InitAsDefaultInstance();
  Customer::default_instance_->InitAsDefaultInstance();
  Staff::default_instance_->InitAsDefaultInstance();
  MemberList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_seng330a2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_seng330a2_2eproto {
  StaticDescriptorInitializer_seng330a2_2eproto() {
    protobuf_AddDesc_seng330a2_2eproto();
  }
} static_descriptor_initializer_seng330a2_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Member_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_Type_descriptor_;
}
bool Member_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Member_Type Member::CUSTOMER;
const Member_Type Member::STAFF;
const Member_Type Member::Type_MIN;
const Member_Type Member::Type_MAX;
const int Member::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Member::kNameFieldNumber;
const int Member::kAddressFieldNumber;
const int Member::kMembershipIdFieldNumber;
const int Member::kBraceletIdFieldNumber;
const int Member::kMemberTypeFieldNumber;
const int Member::kCustomerFieldNumber;
const int Member::kStaffFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seng330a2.Member)
}

void Member::InitAsDefaultInstance() {
  customer_ = const_cast< ::seng330a2::Customer*>(&::seng330a2::Customer::default_instance());
  staff_ = const_cast< ::seng330a2::Staff*>(&::seng330a2::Staff::default_instance());
}

Member::Member(const Member& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seng330a2.Member)
}

void Member::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membership_id_ = GOOGLE_ULONGLONG(0);
  bracelet_id_ = GOOGLE_ULONGLONG(0);
  member_type_ = 0;
  customer_ = NULL;
  staff_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:seng330a2.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete customer_;
    delete staff_;
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_seng330a2_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New(::google::protobuf::Arena* arena) const {
  Member* n = new Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(membership_id_, bracelet_id_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    member_type_ = 0;
    if (has_customer()) {
      if (customer_ != NULL) customer_->::seng330a2::Customer::Clear();
    }
    if (has_staff()) {
      if (staff_ != NULL) staff_->::seng330a2::Staff::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seng330a2.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seng330a2.Member.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "seng330a2.Member.address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_membership_id;
        break;
      }

      // required uint64 membership_id = 3;
      case 3: {
        if (tag == 24) {
         parse_membership_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &membership_id_)));
          set_has_membership_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bracelet_id;
        break;
      }

      // required uint64 bracelet_id = 4;
      case 4: {
        if (tag == 32) {
         parse_bracelet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bracelet_id_)));
          set_has_bracelet_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_type;
        break;
      }

      // required .seng330a2.Member.Type member_type = 5;
      case 5: {
        if (tag == 40) {
         parse_member_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::seng330a2::Member_Type_IsValid(value)) {
            set_member_type(static_cast< ::seng330a2::Member_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_customer;
        break;
      }

      // optional .seng330a2.Customer customer = 6;
      case 6: {
        if (tag == 50) {
         parse_customer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_staff;
        break;
      }

      // optional .seng330a2.Staff staff = 7;
      case 7: {
        if (tag == 58) {
         parse_staff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seng330a2.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seng330a2.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seng330a2.Member)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seng330a2.Member.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seng330a2.Member.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // required uint64 membership_id = 3;
  if (has_membership_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->membership_id(), output);
  }

  // required uint64 bracelet_id = 4;
  if (has_bracelet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bracelet_id(), output);
  }

  // required .seng330a2.Member.Type member_type = 5;
  if (has_member_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->member_type(), output);
  }

  // optional .seng330a2.Customer customer = 6;
  if (has_customer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->customer_, output);
  }

  // optional .seng330a2.Staff staff = 7;
  if (has_staff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->staff_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seng330a2.Member)
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seng330a2.Member)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seng330a2.Member.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "seng330a2.Member.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // required uint64 membership_id = 3;
  if (has_membership_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->membership_id(), target);
  }

  // required uint64 bracelet_id = 4;
  if (has_bracelet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bracelet_id(), target);
  }

  // required .seng330a2.Member.Type member_type = 5;
  if (has_member_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->member_type(), target);
  }

  // optional .seng330a2.Customer customer = 6;
  if (has_customer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->customer_, target);
  }

  // optional .seng330a2.Staff staff = 7;
  if (has_staff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->staff_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seng330a2.Member)
  return target;
}

int Member::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_address()) {
    // required string address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_membership_id()) {
    // required uint64 membership_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->membership_id());
  }

  if (has_bracelet_id()) {
    // required uint64 bracelet_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bracelet_id());
  }

  if (has_member_type()) {
    // required .seng330a2.Member.Type member_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->member_type());
  }

  return total_size;
}
int Member::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string address = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required uint64 membership_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->membership_id());

    // required uint64 bracelet_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bracelet_id());

    // required .seng330a2.Member.Type member_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->member_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96) {
    // optional .seng330a2.Customer customer = 6;
    if (has_customer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->customer_);
    }

    // optional .seng330a2.Staff staff = 7;
    if (has_staff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->staff_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (from.has_membership_id()) {
      set_membership_id(from.membership_id());
    }
    if (from.has_bracelet_id()) {
      set_bracelet_id(from.bracelet_id());
    }
    if (from.has_member_type()) {
      set_member_type(from.member_type());
    }
    if (from.has_customer()) {
      mutable_customer()->::seng330a2::Customer::MergeFrom(from.customer());
    }
    if (from.has_staff()) {
      mutable_staff()->::seng330a2::Staff::MergeFrom(from.staff());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_customer()) {
    if (!this->customer_->IsInitialized()) return false;
  }
  if (has_staff()) {
    if (!this->staff_->IsInitialized()) return false;
  }
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  name_.Swap(&other->name_);
  address_.Swap(&other->address_);
  std::swap(membership_id_, other->membership_id_);
  std::swap(bracelet_id_, other->bracelet_id_);
  std::swap(member_type_, other->member_type_);
  std::swap(customer_, other->customer_);
  std::swap(staff_, other->staff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Customer_SubscriptionLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Customer_SubscriptionLevel_descriptor_;
}
bool Customer_SubscriptionLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Customer_SubscriptionLevel Customer::INACTIVE;
const Customer_SubscriptionLevel Customer::BASIC;
const Customer_SubscriptionLevel Customer::PREMIUM;
const Customer_SubscriptionLevel Customer::DELUXE;
const Customer_SubscriptionLevel Customer::SubscriptionLevel_MIN;
const Customer_SubscriptionLevel Customer::SubscriptionLevel_MAX;
const int Customer::SubscriptionLevel_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Customer::kCreditCardNumFieldNumber;
const int Customer::kGymCreditsFieldNumber;
const int Customer::kSubscriptionLevelFieldNumber;
#endif  // !_MSC_VER

Customer::Customer()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seng330a2.Customer)
}

void Customer::InitAsDefaultInstance() {
}

Customer::Customer(const Customer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seng330a2.Customer)
}

void Customer::SharedCtor() {
  _cached_size_ = 0;
  credit_card_num_ = GOOGLE_ULONGLONG(0);
  gym_credits_ = 0;
  subscription_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Customer::~Customer() {
  // @@protoc_insertion_point(destructor:seng330a2.Customer)
  SharedDtor();
}

void Customer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Customer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Customer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Customer_descriptor_;
}

const Customer& Customer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_seng330a2_2eproto();
  return *default_instance_;
}

Customer* Customer::default_instance_ = NULL;

Customer* Customer::New(::google::protobuf::Arena* arena) const {
  Customer* n = new Customer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Customer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Customer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(credit_card_num_, subscription_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Customer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seng330a2.Customer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 credit_card_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &credit_card_num_)));
          set_has_credit_card_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gym_credits;
        break;
      }

      // required int32 gym_credits = 2;
      case 2: {
        if (tag == 16) {
         parse_gym_credits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gym_credits_)));
          set_has_gym_credits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subscription_level;
        break;
      }

      // required .seng330a2.Customer.SubscriptionLevel subscription_level = 3;
      case 3: {
        if (tag == 24) {
         parse_subscription_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::seng330a2::Customer_SubscriptionLevel_IsValid(value)) {
            set_subscription_level(static_cast< ::seng330a2::Customer_SubscriptionLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seng330a2.Customer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seng330a2.Customer)
  return false;
#undef DO_
}

void Customer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seng330a2.Customer)
  // required uint64 credit_card_num = 1;
  if (has_credit_card_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->credit_card_num(), output);
  }

  // required int32 gym_credits = 2;
  if (has_gym_credits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gym_credits(), output);
  }

  // required .seng330a2.Customer.SubscriptionLevel subscription_level = 3;
  if (has_subscription_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->subscription_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seng330a2.Customer)
}

::google::protobuf::uint8* Customer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seng330a2.Customer)
  // required uint64 credit_card_num = 1;
  if (has_credit_card_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->credit_card_num(), target);
  }

  // required int32 gym_credits = 2;
  if (has_gym_credits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gym_credits(), target);
  }

  // required .seng330a2.Customer.SubscriptionLevel subscription_level = 3;
  if (has_subscription_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->subscription_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seng330a2.Customer)
  return target;
}

int Customer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_credit_card_num()) {
    // required uint64 credit_card_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->credit_card_num());
  }

  if (has_gym_credits()) {
    // required int32 gym_credits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gym_credits());
  }

  if (has_subscription_level()) {
    // required .seng330a2.Customer.SubscriptionLevel subscription_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscription_level());
  }

  return total_size;
}
int Customer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 credit_card_num = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->credit_card_num());

    // required int32 gym_credits = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gym_credits());

    // required .seng330a2.Customer.SubscriptionLevel subscription_level = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscription_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Customer::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Customer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Customer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Customer::MergeFrom(const Customer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_credit_card_num()) {
      set_credit_card_num(from.credit_card_num());
    }
    if (from.has_gym_credits()) {
      set_gym_credits(from.gym_credits());
    }
    if (from.has_subscription_level()) {
      set_subscription_level(from.subscription_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Customer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Customer::CopyFrom(const Customer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Customer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Customer::Swap(Customer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Customer::InternalSwap(Customer* other) {
  std::swap(credit_card_num_, other->credit_card_num_);
  std::swap(gym_credits_, other->gym_credits_);
  std::swap(subscription_level_, other->subscription_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Customer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Customer_descriptor_;
  metadata.reflection = Customer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Staff_Clearance_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Staff_Clearance_descriptor_;
}
bool Staff_Clearance_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Staff_Clearance Staff::GENERAL;
const Staff_Clearance Staff::MANAGER;
const Staff_Clearance Staff::ADMINISTRATOR;
const Staff_Clearance Staff::Clearance_MIN;
const Staff_Clearance Staff::Clearance_MAX;
const int Staff::Clearance_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Staff::kEmployeeIdFieldNumber;
const int Staff::kStaffClearanceFieldNumber;
#endif  // !_MSC_VER

Staff::Staff()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seng330a2.Staff)
}

void Staff::InitAsDefaultInstance() {
}

Staff::Staff(const Staff& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seng330a2.Staff)
}

void Staff::SharedCtor() {
  _cached_size_ = 0;
  employee_id_ = GOOGLE_ULONGLONG(0);
  staff_clearance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Staff::~Staff() {
  // @@protoc_insertion_point(destructor:seng330a2.Staff)
  SharedDtor();
}

void Staff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Staff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Staff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Staff_descriptor_;
}

const Staff& Staff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_seng330a2_2eproto();
  return *default_instance_;
}

Staff* Staff::default_instance_ = NULL;

Staff* Staff::New(::google::protobuf::Arena* arena) const {
  Staff* n = new Staff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Staff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Staff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(employee_id_, staff_clearance_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Staff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seng330a2.Staff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 employee_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &employee_id_)));
          set_has_employee_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_staff_clearance;
        break;
      }

      // required .seng330a2.Staff.Clearance staff_clearance = 3;
      case 3: {
        if (tag == 24) {
         parse_staff_clearance:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::seng330a2::Staff_Clearance_IsValid(value)) {
            set_staff_clearance(static_cast< ::seng330a2::Staff_Clearance >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seng330a2.Staff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seng330a2.Staff)
  return false;
#undef DO_
}

void Staff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seng330a2.Staff)
  // required uint64 employee_id = 1;
  if (has_employee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->employee_id(), output);
  }

  // required .seng330a2.Staff.Clearance staff_clearance = 3;
  if (has_staff_clearance()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->staff_clearance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seng330a2.Staff)
}

::google::protobuf::uint8* Staff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seng330a2.Staff)
  // required uint64 employee_id = 1;
  if (has_employee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->employee_id(), target);
  }

  // required .seng330a2.Staff.Clearance staff_clearance = 3;
  if (has_staff_clearance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->staff_clearance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seng330a2.Staff)
  return target;
}

int Staff::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_employee_id()) {
    // required uint64 employee_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->employee_id());
  }

  if (has_staff_clearance()) {
    // required .seng330a2.Staff.Clearance staff_clearance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->staff_clearance());
  }

  return total_size;
}
int Staff::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 employee_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->employee_id());

    // required .seng330a2.Staff.Clearance staff_clearance = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->staff_clearance());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Staff::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Staff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Staff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Staff::MergeFrom(const Staff& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_employee_id()) {
      set_employee_id(from.employee_id());
    }
    if (from.has_staff_clearance()) {
      set_staff_clearance(from.staff_clearance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Staff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Staff::CopyFrom(const Staff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Staff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Staff::Swap(Staff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Staff::InternalSwap(Staff* other) {
  std::swap(employee_id_, other->employee_id_);
  std::swap(staff_clearance_, other->staff_clearance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Staff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Staff_descriptor_;
  metadata.reflection = Staff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberList::kMemberFieldNumber;
#endif  // !_MSC_VER

MemberList::MemberList()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seng330a2.MemberList)
}

void MemberList::InitAsDefaultInstance() {
}

MemberList::MemberList(const MemberList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seng330a2.MemberList)
}

void MemberList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberList::~MemberList() {
  // @@protoc_insertion_point(destructor:seng330a2.MemberList)
  SharedDtor();
}

void MemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberList_descriptor_;
}

const MemberList& MemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_seng330a2_2eproto();
  return *default_instance_;
}

MemberList* MemberList::default_instance_ = NULL;

MemberList* MemberList::New(::google::protobuf::Arena* arena) const {
  MemberList* n = new MemberList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberList::Clear() {
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seng330a2.MemberList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .seng330a2.Member member = 1;
      case 1: {
        if (tag == 10) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seng330a2.MemberList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seng330a2.MemberList)
  return false;
#undef DO_
}

void MemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seng330a2.MemberList)
  // repeated .seng330a2.Member member = 1;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->member(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:seng330a2.MemberList)
}

::google::protobuf::uint8* MemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seng330a2.MemberList)
  // repeated .seng330a2.Member member = 1;
  for (unsigned int i = 0, n = this->member_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->member(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:seng330a2.MemberList)
  return target;
}

int MemberList::ByteSize() const {
  int total_size = 0;

  // repeated .seng330a2.Member member = 1;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberList::MergeFrom(const MemberList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  member_.MergeFrom(from.member_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberList::CopyFrom(const MemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->member())) return false;
  return true;
}

void MemberList::Swap(MemberList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberList::InternalSwap(MemberList* other) {
  member_.UnsafeArenaSwap(&other->member_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberList_descriptor_;
  metadata.reflection = MemberList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace seng330a2

// @@protoc_insertion_point(global_scope)
